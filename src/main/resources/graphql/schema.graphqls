type Expense {
  id: ID!
  amount: Float!
  repeated: String!
  date: String!
  user_id: String
}

type Income {
  id: ID!
  amount: Float!
  repeated: String!
  date: String!
  user_id: String
}

type Balance {
  id: ID!
  amount: Float!
  date: String!
  user_id: String
}

type Query {
  getBalanceById(id: ID): Balance!
}

type Mutation {
  addBalance(amount: Float, date: String!, user_id: String): Balance!
  updateBalance(id: ID, amount: Float, date: String!, user_id: String): Balance!
  deleteBalanceById(id: ID): Boolean!
}

# type Query {
#   getExpenseById(id: ID): Expense
#   getIncomeById(id: ID): Income
#   getBalanceById(id: ID): Balance
#   getExpensesByUser(user_id: String): [Expense]
#   getIncomesByUser(user_id: String): [Income]
#   getBalancesByUser(user_id: String): [Balance]
# }

# type Mutation {
#   # addExpense(
#   #   amount: Float
#   #   repeated: String
#   #   date: String
#   #   user_id: String
#   # ): Expense
#   # addIncome(
#   #   amount: Float
#   #   repeated: String
#   #   date: String
#   #   user_id: String
#   # ): Income
#   addBalance(amount: Float, date: String, user_id: String): Balance
#   # updateExpense(
#   #   id: ID
#   #   amount: Float
#   #   repeated: String
#   #   date: String
#   #   user_id: String
#   # ): Expense
#   # updateIncome(
#   #   id: ID
#   #   amount: Float
#   #   repeated: String
#   #   date: String
#   #   user_id: String
#   # ): Income
#   updateBalance(id: ID, amount: Float, date: String, user_id: String): Balance
#   # deleteExpenseById(id: ID): Expense
#   # deleteIncomeById(id: ID): Income
#   deleteBalanceById(id: ID): Balance
# }
